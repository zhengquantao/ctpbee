.. _风控:

风控
=========================

当你想使用风控的时候， 你需要明白风控的意义

在你开发一个策略中, 伴随着策略的运行，你可能会产生盈亏。 基于此, 我们需要实现严格的止损止盈。 这就是风控存在的意义，杜绝侥幸心理。
接下来我将向你演示如何在ctpbee里面使用极其强悍的风控能力

ctpbee提供事件的 ``事前检查`` 和 ``事后检查`` 以及 ``实时检查`` 三种控制



**操作信号发出** ---> **事前检查** ----> **执行信号** ----> **事后执行作用域**

现在来开始我们的演示部分::

    from ctpbee import RiskLevel


    class RiskControl(RiskLevel):
        count = 0

        def before_short(self, *args, **kwargs):
            # 在这里实现对参数的检查以及判定是否可以返回正确等等操作
            result:bool = True # 检查结果. True判定执行，False判定为阻止操作

            # 实现参数修改功能，ctpbee需要你将参数返回回去
            # 在这个过程中你可以对参数进行修改. 但是请记住,
            # 默认传入进来的args是元组,请将其转为列表再做修改
            return result, *args, **kwargs


        def after_short(self, result):
            # 1, result为函数执行的结果
            # 2, 事后执行域
            # 一个操作的结果是不可能立即拿到结果，尤其在ctp接口下
            # 但是在此情况下又不能一直进行等待堵塞执行线程。
            # 所以这个函数是被一个 默认设置超时为3s 就销毁的线程所执行



        def realtime_check(self):
            # 如果一旦重写此函数,那么这个函数会被一秒执行一次， 如果你想实现一个周期为3s的执行， 那么直接读取上面的count
            # 举个例子
            """
            if count % 3 == 0:
                # 执行周期为3秒的检查
                # 此处执行代码
                pass
            self.count +=1
            """

你可能会好奇怎么获取到app里面的数据， 不用担心，直接通过 ``self.app`` 即可拿到

代码是写好了，问题随之而来 --> 我如何让我的app知道这个风控呢,这个实现也很简单.请看下面代码::

    from ctpbee import CtpBee

    app = CtpBee("ctpbee", __name__, risk=RiskControl), 即可实现绑定。


但是别以为这样就可以实现风控了， 注意到上面的 ``before_short`` 。

这个是 **before** 标志着是事前，而short代表着卖空操作。那我是如何把这个操作进行绑定的呢。

下一章:
    :ref:`Action模块` 中实现了绑定操作过程




