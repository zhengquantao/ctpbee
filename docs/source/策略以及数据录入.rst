.. _策略以及数据录入:

策略以及数据录入
======================
两者核心都来自于CtpbeeApi
继承此类::

    from ctpbee import CtpbeeApi
    from ctpbee import CtpBee


    class HelloWorld(CtpbeeApi):
        def __init__(self, name, app=None):
            super().__init__(name, app, type="data")  # 无论你做啥,记得执行这一句
            # 你可以扩充参数,但是请记得name和app是必须要的

        def on_tick(self, tick):
            """ tick回报 """

        def on_account(self, account):
            """ 账户信息回报 """
            pass

        def on_bar(self, bar):
            """ bar线回报 """
            pass

        def on_trade(self, trade):
            """ 成交回报 """
            pass

        def on_position(self, position):
            """ 持仓信息回报 """
            pass

        def on_order(self, order):
            """订单回报 """
            pass

        def on_init(self):
            """初始化回调"""

    app = CtpBee("world", __name__)

    hello = HelloWord("hello", app)
    info = {
        "CONNECT_INFO": {
            "userid": "",
            "password": "",
            "brokerid": "",
            "md_address": "",
            "td_address": "",
            "appid": "",
            "auth_code": "",
            "product_info":""
        },
        "TD_FUNC": True,  # 开启交易功能
    }
    app.config.from_mapping(info) # 载入配置文件
    strategy = HelloWorld("hello")
    app.add_extension(strategy)
    app.start()  # 开始执行






``书读百变 代码自现``


另外的实现方式
---------------
习惯了handler_bar这样的用户可能会比较难以理解上述的类方式, 别担心, 我们使用了一种平滑的方式进行过度::

    from ctpbee import CtpbeeApi
    api = CtpbeeApi("Hello ctpbee")

    @api.route(handler="bar")
    def handler_bar(self, bar):
        """
        self: 策略本身,  类似于全局变量 context
        bar : k线数据, 也就是你需要处理的数据
        """
        # 处理代码
        print(bar)


    @api.register()
    def call_me(self, msg):
        """
        register语法用于注册方法, 这种注册的方法可以在其他方式中随意进行调用
        self: 策略本身
        msg, 参数信息等

        """
        print(msg)

    @api.route(handler="tick")
    def handler_tick(self, tick):
        """处理tick信息"""
        self.call_me("Hi 我在此处调用了call_me哦") # 在这个方法可以调用刚才注册的call_me方法
        print(tick)


    app = CtpBee("world", __name__)
    info = {
        "CONNECT_INFO": {
            "userid": "",
            "password": "",
            "brokerid": "",
            "md_address": "",
            "td_address": "",
            "appid": "",
            "auth_code": "",
            "product_info":""
        },
        "TD_FUNC": True,  # 开启交易功能
    }
    app.config.from_mapping(info) # 载入配置文件
    # 同样的载入方式
    app.add_extension(api)
    app.start()  # 开始执行


上述所说很清晰直白
 ``@api.route()`` 语法用于编写处理行情信息等代码 handler里面传递的是 事件名称

 ``@api.register()`` 用于将函数注入到策略中, 使得其他函数能够调用这个方法


数据录入
-------------------
根据上面的所展示的层, 一切变得自由与简单,你可以通过在on_tick和on_bar下面编写相关代码将数据写入数据库即可

值得注意的是ctpbee提供了 ``dumps`` 和 ``loads`` 两个函数让你方便的将 字符串与对象之间进行互转,让你快速复盘数据



策略开发准则
-------------------
这里是开发策略准则
每个插件都是相互独立的,  可以实现多个策略的互相计算, 在HelloWord内你可以使用self.app来调用CtpBee对象进行操作。


最后一章:
    :ref:`风控`


