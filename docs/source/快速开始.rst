.. _快速开始:

快速开始
===================

先让我来说说一些杂话吧
得益于vnpy的强大底层 (Pybind11牛逼), 能够让Python快速获得ctp相应的底层API支撑

flask的微核心设计结构的来了无限的可能性, 能够让你快速上手量化开发.

我将这两者结合起来,组装成了ctpbee, 当然ctpbee的所有设计都是为了简化你的开发, 我们不会制定数据库连接方式 ,或者告知你如何进行载入数据. ctpbee只会暴露出相应的接口, 然后全靠你的双手打造 一切都由你自由定义.
当然得益于设计, 你可以通过简单轻巧的API在执行的地方访问到任何你想要的数据, 自由即是一切

请认真阅读这个概念-> ``ctpbee是一个简易二次开发的框架 ,而不是一个完整的量化产品``


以下代码告诉你如何快速开始ctpbee ::

    from ctpbee import CtpBee
    from ctpbee import CtpbeeApi


    class DataRecorder(CtpbeeApi):
        """"""
        def __init__(self, extension_name): # 你可以在这里自定义扩展参数
            super().__init__(extension_name,app=None)

        def on_tick(self, tick):
            """ 处理tick """
            pass

        def on_bar(self, bar):
            """ 处理bar线 """
            pass

        def on_init(self, init):
            """ 初始化回调 """

        def on_contract(self, contract):
            """ 处理合约信息 """

        def on_trade(self, trade):
            """ 处理成交回报 """

        def on_realtime(self):
            """ 一秒运行一次的检查函数 """"

        def on_order(self, order):
            """ 报单回报 """

        def on_position(self, position):
            """ 持仓信息回报 """

        def on_account(self, account):
            """  账户信息回报 """"

    app = CtpBee("ctpbee", __name__)
    info = {
        "CONNECT_INFO": {
            "userid": "",
            "password": "",
            "brokerid": "",
            "md_address": "",
            "td_address": "",
            "appid": "",
            "auth_code": "",
            "product_info":""
        },
        "TD_FUNC": True,
    }
    recorder = DataRecoreder("data_recorder")
    app.config.from_mapping(info)  #
    app.add_extension(recorder)
    app.start()


- 创建核心账户对象 app = CtpBee("ctpbee", __name__)
    + 创建核心账户对象,对于每个账户都有一份独立的Ctpbee对象
    + "ctpbee"是用来识别每个账户的别称
    + __name__ 是用来告知当前模块

- 载入配置信息
    + app.config.from_mapping(info) 通过核心对象的config模块进行载入配置文件。请记住配置项都是大写的
    + ctpbee内置了多种配置载入方式,更多请参阅 :ref:`配置文件`.

- 载入逻辑处理代码
    +  class DataRecorder(CtpbeeApi) 你需要继承此CtpbeeApi，同时提供了on_tick和on_bar等等函数让你自行处理数据
    + recorder = DataRecoreder("data_recorder") ，实例化对象，data_recorder是插件的名字
    + app.add_extension(recorder) 将此插件插入到核心对象中去

- 最后开启功能
    app.start() 开始事件引擎进行事件处理


上面的只是让你快速上手ctpbee，但是ctpbee有一些值得惊喜的特性让你去探索， just to get it !


下一章：
  :ref:`教程`.



