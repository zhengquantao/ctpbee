.. _日志模块:


日志模块
==================

日志使用
------------------

为了方便你的快速日志输出或者通知其他平台等操作以及美观的实现, ctpbee为你实现了一个 ``Vlogger`` ,会帮助减少你的工作量

那我该如何使用他呢, 别担心, 我们已经将相关的函数封装在各个模块中,开箱即用

- 警告::

    self.warning(message)

- 信息::

    self.info(message)

- 调试::

    self.info(message)

- 错误::

    self.error(message)

输出解释
 ``2019-09-10 18:37:38,332 last       INFO     App     合约信息查询成功``

上面是默认的实现, 前面是日志输出的时间,  last是你当前app的名字. INFO 是你日志等级, App是日志事件的发出者  合约信息查询成功 则是日志的具体内容
上述这种应该能满足绝大部分的需求,但是如果作为开发者 我可能更想处理这些 ``日志信息`` 和扩充这些日志字段, 那我该如何去实现呢? 请消息阅读下面的 ``进阶`` 模块

进阶
-----------------

如果你想要进阶使用相关的日志模块 , 那么请别错过下面相关的内容

- 我需要获得这些信息加以处理怎么办::

    # 解决方案
    from ctpbee import CtpBee,VLogger
    class Vlog(VLogger):
        def handler_record(self, record):
            """ 所有的日志信息输出都会通过这里，你需要筛选出你想要的信息 """
            pass

    app = CtpBee("ctp", __name__, logger_class=Vlog)

    # do some operation/一些操作
    ....

呐， 是不是出乎意料的 ``简单`` 呢。但是接下来的实现就比较复杂了

- 我需要扩展我日志中的输出字段

    得益于一晚上的努力， 我成功实现自定扩展参数的设置， 但是这项功能仍然工作不是很稳定. 所以我在此处不做解释， 目前如果有需要的小伙伴可以加群咨询我

    todo: 完善此处扩展输出字段文档




到此处文档的介绍就告一段落了, 如果你热爱这个框架, 我希望你能进一步了解它, 去帮助我一起优化它, 欢迎提交pr

^_^  Hope you are happy all the time
